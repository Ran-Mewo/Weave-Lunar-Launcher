name: Build and Upload Artifacts

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  APP_NAME: Weave-Lunar-Launcher
  APP_DESCRIPTION: "A Minecraft Weave Mod Loader Launcher for Lunar Client!"
  ICON_PATH: icons/weave_loader.png

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev

      - name: Build
        run: cargo build --release

      - name: Prepare AppImage (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y libfuse2
          mkdir -p AppDir/usr/{bin,share/{applications,icons/hicolor/256x256/apps}}
          cp target/release/${{ env.APP_NAME }} AppDir/usr/bin/
          cp ${{ env.ICON_PATH }} AppDir/usr/share/icons/hicolor/256x256/apps/${{ env.APP_NAME }}.png
          cp ${{ env.ICON_PATH }} AppDir/${{ env.APP_NAME }}.png
          cat > AppDir/${{ env.APP_NAME }}.desktop << EOL
          [Desktop Entry]
          Name=${{ env.APP_NAME }}
          Exec=${{ env.APP_NAME }}
          Icon=${{ env.APP_NAME }}
          Type=Application
          Categories=Utility;
          Comment=${{ env.APP_DESCRIPTION }}
          EOL
          cat > AppDir/AppRun << EOL
          #!/bin/sh
          cd "\$(dirname "\$0")"
          exec ./usr/bin/${{ env.APP_NAME }}
          EOL
          chmod +x AppDir/AppRun

      - name: Create AppImage (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          ./appimagetool AppDir ${{ env.APP_NAME }}-linux.AppImage

      - name: Rename binary (Windows)
        if: matrix.os == 'windows-latest'
        run: mv target/release/${{ env.APP_NAME }}.exe ${{ env.APP_NAME }}-windows.exe

      - name: Rename binary (macOS)
        if: matrix.os == 'macOS-latest'
        run: mv target/release/${{ env.APP_NAME }} ${{ env.APP_NAME }}-macos

      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.APP_NAME }}-linux
          path: ${{ env.APP_NAME }}-linux.AppImage

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.APP_NAME }}-windows
          path: ${{ env.APP_NAME }}-windows.exe

      - name: Upload artifact (macOS)
        if: matrix.os == 'macOS-latest'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.APP_NAME }}-macos
          path: ${{ env.APP_NAME }}-macos
